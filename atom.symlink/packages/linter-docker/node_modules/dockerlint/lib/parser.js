// Generated by CoffeeScript 1.9.0
(function() {
  var args, fs, utils;

  args = require('subarg')(process.argv.slice(2), {
    alias: {
      d: 'debug',
      f: 'file',
      h: 'help',
      p: 'pedantic'
    }
  });

  fs = require('fs');

  utils = require(__dirname + "/utils");

  exports.getInstruction = function(s) {
    var instruction;
    instruction = s.split(/[ \t]/)[0];
    if (instruction === '#') {
      return 'comment';
    } else {
      return instruction;
    }
  };

  exports.getArguments = function(s) {
    var inst;
    inst = this.getInstruction(s);
    if (inst === 'comment') {
      inst = '#';
    }
    return [s.replace(inst, '').replace(/\\(\s*)$/, '').trim()];
  };

  exports.parser = function(dockerfile) {
    var rules, self;
    rules = [];
    self = this;
    (function() {
      var cont, data, e, line, lineno, rule, _i, _len, _results;
      lineno = 1;
      cont = false;
      rule = [];
      try {
        data = fs.readFileSync(dockerfile).toString().split('\n');
      } catch (_error) {
        e = _error;
        return [];
      }
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        line = data[_i];
        if (utils.notEmpty(line)) {
          if (line.endsWith('\\')) {
            if (cont) {
              rule[0]["arguments"] = rule[0]["arguments"].concat(self.getArguments(line));
            } else {
              cont = true;
              rule.push({
                line: lineno,
                instruction: self.getInstruction(line),
                "arguments": self.getArguments(line)
              });
            }
          } else if (cont && !line.endsWith('\\')) {
            rules.push({
              line: rule[0].line,
              instruction: rule[0].instruction,
              "arguments": rule[0]["arguments"].concat(self.getArguments(line))
            });
            rule = [];
            cont = false;
          } else if (!(line.endsWith('\\' && cont))) {
            rules.push({
              line: lineno,
              instruction: self.getInstruction(line),
              "arguments": self.getArguments(line)
            });
          }
        }
        _results.push(lineno++);
      }
      return _results;
    })();
    return rules;
  };

}).call(this);
