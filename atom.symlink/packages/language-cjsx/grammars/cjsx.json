{
  "comment": "CoffeeScript (JSX) Syntax: version 1",
  "firstLineMatch": "^#!.*\\bcoffee",
  "name": "CoffeeScript (JSX)",
  "repository": {
    "single_quoted_string": {
      "patterns": [{
        "begin": "'",
        "end": "'",
        "name": "string.quoted.single.coffee",
        "endCaptures": {
          "0": {
            "name": "punctuation.definition.string.end.coffee"
          }
        },
        "beginCaptures": {
          "0": {
            "name": "punctuation.definition.string.begin.coffee"
          }
        },
        "patterns": [{
          "name": "constant.character.escape.coffee",
          "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
        }, {
          "include": "#jsx-entities"
        }]
      }]
    },
    "embedded_comment": {
      "patterns": [{
        "captures": {
          "1": {
            "name": "punctuation.definition.comment.coffee"
          }
        },
        "name": "comment.line.number-sign.coffee",
        "match": "(?<!\\\\)(#).*$\\n?"
      }]
    },
    "numeric": {
      "patterns": [{
        "name": "constant.numeric.coffee",
        "match": "(?<!\\$)\\b((0([box])[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?(e[+\\-]?[0-9]+)?))\\b"
      }]
    },
    "interpolated_coffee": {
      "patterns": [{
        "captures": {
          "0": {
            "name": "punctuation.section.embedded.coffee"
          }
        },
        "begin": "\\#\\{",
        "end": "\\}",
        "name": "source.coffee.embedded.source",
        "patterns": [{
          "include": "$self"
        }]
      }]
    },
    "variable_name": {
      "patterns": [{
        "captures": {
          "1": {
            "name": "variable.assignment.coffee"
          }
        },
        "name": "variable.assignment.coffee",
        "match": "([a-zA-Z\\$_]\\w*(\\.\\w+)*)"
      }]
    },
    "double_quoted_string": {
      "patterns": [{
        "begin": "\"",
        "end": "\"",
        "name": "string.quoted.double.coffee",
        "endCaptures": {
          "0": {
            "name": "punctuation.definition.string.end.coffee"
          }
        },
        "beginCaptures": {
          "0": {
            "name": "punctuation.definition.string.begin.coffee"
          }
        },
        "patterns": [{
          "name": "constant.character.escape.coffee",
          "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
        }, {
          "include": "#interpolated_coffee"
        }, {
          "include": "#jsx-entities"
        }]
      }]
    },
    "instance_variable": {
      "patterns": [{
        "name": "variable.other.readwrite.instance.coffee",
        "match": "(@)([a-zA-Z_\\$]\\w*)?"
      }]
    },


    "jsx-tag-attributes": {
      "patterns": [{
        "include": "#jsx-tag-attribute-name"
      }, {
        "include": "#double_quoted_string"
      }, {
        "include": "#single_quoted_string"
      }, {
        "include": "#jsx-evaluated-code"
      }]
    },
    "jsx-tag-attribute-name": {
      "name": "meta.tag.attribute-name.coffee",
      "match": "\\b([a-zA-Z\\-:]+)",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.coffee"
        }
      }
    },
    "jsx-entities": {
      "patterns": [{
        "name": "constant.character.entity.coffee",
        "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
        "captures": {
          "1": {
            "name": "punctuation.definition.entity.coffee"
          },
          "3": {
            "name": "punctuation.definition.entity.coffee"
          }
        }
      }, {
        "name": "invalid.illegal.bad-ampersand.coffee",
        "match": "&"
      }]
    },
    "jsx-evaluated-code": {
      "begin": "{",
      "end": "}",
      "name": "meta.brace.curly.coffee",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.brace.curly.end.coffee"
        }
      },
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.brace.curly.start.coffee"
        }
      },
      "patterns": [{
        "include": "#expression"
      }, {
        "include": "$self"
      }]
    },
    "jsx-tag-open": {
      "begin": "(<)([a-zA-Z0-9:]+)",
      "end": "(/?>)",
      "name": "tag.coffee",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.coffee"
        }
      },
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.coffee"
        },
        "2": {
          "name": "entity.name.tag.coffee"
        }
      },
      "patterns": [{
        "include": "#jsx-tag-attributes"
      }]
    },
    "jsx-tag-close": {
      "match": "(</)([^>]+)(>)",
      "name": "tag.coffee",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.begin.coffee"
        },
        "2": {
          "name": "entity.name.tag.coffee"
        },
        "3": {
          "name": "punctuation.definition.tag.end.coffee"
        }
      }
    },
    "jsx-tag-invalid": {
      "name": "invalid.illegal.tag.incomplete.coffee",
      "match": "<\\s*>"
    },
    "jsx": {
      "name": "meta.jsx.coffee",
      "patterns": [{
        "include": "#jsx-tag-open"
      }, {
        "include": "#jsx-tag-close"
      }, {
        "include": "#jsx-tag-invalid"
      }]
    }

  },
  "foldingStartMarker": "^\\s*class\\s+\\S.*$|.*(->|=>)\\s*$|.*[\\[{]\\s*$",
  "scopeName": "source.coffee",
  "keyEquivalent": "^~C",
  "patterns": [{
    "include": "#jsx"
  }, {
    "comment": "match stuff like: a -> \u2026 ",
    "captures": {
      "1": {
        "name": "variable.parameter.function.coffee"
      },
      "2": {
        "name": "storage.type.function.coffee"
      }
    },
    "name": "meta.inline.function.coffee",
    "match": "(\\([^()]*?\\))\\s*([=-]>)"
  }, {
    "captures": {
      "1": {
        "name": "keyword.operator.new.coffee"
      },
      "2": {
        "name": "support.class.coffee"
      }
    },
    "name": "meta.class.instance.constructor",
    "match": "(new)\\s+(\\w+(?:\\.\\w*)*)"
  }, {
    "endCaptures": {
      "0": {
        "name": "punctuation.definition.string.end.coffee"
      }
    },
    "begin": "'''",
    "end": "'''",
    "name": "string.quoted.heredoc.coffee",
    "beginCaptures": {
      "0": {
        "name": "punctuation.definition.string.begin.coffee"
      }
    }
  }, {
    "begin": "\"\"\"",
    "end": "\"\"\"",
    "name": "string.quoted.double.heredoc.coffee",
    "endCaptures": {
      "0": {
        "name": "punctuation.definition.string.end.coffee"
      }
    },
    "beginCaptures": {
      "0": {
        "name": "punctuation.definition.string.begin.coffee"
      }
    },
    "patterns": [{
      "name": "constant.character.escape.coffee",
      "match": "\\\\."
    }, {
      "include": "#interpolated_coffee"
    }]
  }, {
    "begin": "`",
    "end": "`",
    "name": "string.quoted.script.coffee",
    "endCaptures": {
      "0": {
        "name": "punctuation.definition.string.end.coffee"
      }
    },
    "beginCaptures": {
      "0": {
        "name": "punctuation.definition.string.begin.coffee"
      }
    },
    "patterns": [{
      "name": "constant.character.escape.coffee",
      "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
    }]
  }, {
    "captures": {
      "0": {
        "name": "punctuation.definition.comment.coffee"
      }
    },
    "begin": "(?<!#)###(?!#)",
    "end": "###",
    "name": "comment.block.coffee",
    "patterns": [{
      "name": "storage.type.annotation.coffeescript",
      "match": "@\\w*"
    }]
  }, {
    "captures": {
      "1": {
        "name": "punctuation.definition.comment.coffee"
      }
    },
    "name": "comment.line.number-sign.coffee",
    "match": "(#)(?!\\{).*$\\n?"
  }, {
    "patterns": [{
      "include": "#interpolated_coffee"
    }, {
      "include": "#embedded_comment"
    }],
    "begin": "/{3}",
    "end": "/{3}[imgy]{0,4}",
    "name": "string.regexp.coffee"
  }, {
    "name": "string.regexp.coffee",
    "match": "/(?![\\s=/*+{}?]).*?[^\\\\]/[igmy]{0,4}(?![a-zA-Z0-9])"
  }, {
    "name": "keyword.control.coffee",
    "match": "(?x)\n\t\t\t\t\\b(?<![\\.\\$])(\n\t\t\t\t\tbreak|by|catch|continue|else|finally|for|in|of|if|return|switch|\n\t\t\t\t\tthen|throw|try|unless|when|while|until|loop|do|(?<=for)\\s+own\n\t\t\t\t)(?!\\s*:)\\b\n\t\t\t"
  }, {
    "name": "keyword.operator.coffee",
    "match": "(?x)\n\t\t\t\tand=|or=|!|%|&|\\^|\\*|\\/|(\\-)?\\-(?!>)|\\+\\+|\\+|~|==|=(?!>)|!=|<=|>=|<<=|>>=|\n\t\t\t\t>>>=|<>|<|>|!|&&|\\.\\.(\\.)?|\\?|\\||\\|\\||\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\n\t\t\t\t\\^=|\\b(?<![\\.\\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)\\b\n\t\t\t"
  }, {
    "captures": {
      "1": {
        "name": "variable.assignment.coffee"
      },
      "5": {
        "name": "keyword.operator.coffee"
      },
      "4": {
        "name": "punctuation.separator.key-value"
      }
    },
    "name": "variable.assignment.coffee",
    "match": "([a-zA-Z\\$_](\\w|\\$|\\.)*\\s*(?!\\::)((:)|(=[^=]))(?!(\\s*\\(.*\\))?\\s*((=|-)>)))"
  }, {
    "begin": "(?<=\\s|^)([\\[\\{])(?=.*?[\\]\\}]\\s+[:=])",
    "end": "([\\]\\}]\\s*[:=])",
    "name": "meta.variable.assignment.destructured.coffee",
    "endCaptures": {
      "0": {
        "name": "keyword.operator.coffee"
      }
    },
    "beginCaptures": {
      "0": {
        "name": "keyword.operator.coffee"
      }
    },
    "patterns": [{
      "include": "#variable_name"
    }, {
      "include": "#instance_variable"
    }, {
      "include": "#single_quoted_string"
    }, {
      "include": "#double_quoted_string"
    }, {
      "include": "#numeric"
    }]
  }, {
    "captures": {
      "3": {
        "name": "entity.name.function.coffee"
      },
      "2": {
        "name": "entity.name.function.coffee"
      },
      "5": {
        "name": "storage.type.function.coffee"
      },
      "4": {
        "name": "variable.parameter.function.coffee"
      }
    },
    "name": "meta.function.coffee",
    "match": "(?x)\n\t\t\t\t(\\s*)\n\t\t\t\t(?=[a-zA-Z\\$_])\n\t\t\t\t(\n\t\t\t\t\t[a-zA-Z\\$_](\\w|\\$|:|\\.)*\\s*\n\t\t\t\t\t(?=[:=](\\s*\\(.*\\))?\\s*([=-]>))\n\t\t\t\t)\n\t\t\t"
  }, {
    "comment": "Show well-known functions from Express and Mocha in Go To Symbol view",
    "patterns": [{
      "include": "$self"
    }],
    "begin": "^\\s*(describe|it|app\\.(get|post|put|all|del|delete))",
    "end": "$",
    "name": "meta.function.symbols.coffee"
  }, {
    "name": "storage.type.function.coffee",
    "match": "[=-]>"
  }, {
    "name": "constant.language.boolean.true.coffee",
    "match": "\\b(?<!\\.)(true|on|yes)(?!\\s*[:=])\\b"
  }, {
    "name": "constant.language.boolean.false.coffee",
    "match": "\\b(?<!\\.)(false|off|no)(?!\\s*[:=])\\b"
  }, {
    "name": "constant.language.null.coffee",
    "match": "\\b(?<!\\.)null(?!\\s*[:=])\\b"
  }, {
    "name": "variable.language.coffee",
    "match": "\\b(?<!\\.)(this|extends)(?!\\s*[:=])\\b"
  }, {
    "captures": {
      "1": {
        "name": "storage.type.class.coffee"
      },
      "3": {
        "name": "keyword.control.inheritance.coffee"
      },
      "2": {
        "name": "entity.name.type.class.coffee"
      },
      "4": {
        "name": "entity.other.inherited-class.coffee"
      }
    },
    "name": "meta.class.coffee",
    "match": "(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?"
  }, {
    "name": "keyword.other.coffee",
    "match": "\\b(debugger|\\\\)\\b"
  }, {
    "name": "support.class.coffee",
    "match": "(?x)\\b(\n\t\t\t\tArray|ArrayBuffer|Blob|Boolean|Date|document|event|Function|\n\t\t\t\tInt(8|16|32|64)Array|Math|Map|Number|\n\t\t\t\tObject|Proxy|RegExp|Set|String|WeakMap|\n\t\t\t\twindow|Uint(8|16|32|64)Array|XMLHttpRequest\n\t\t\t)\\b"
  }, {
    "name": "support.function.console.coffee",
    "match": "((?<=console\\.)(debug|warn|info|log|error|time|timeEnd|assert))\\b"
  }, {
    "name": "support.function.coffee",
    "match": "(?x)\\b(\n\t\t\t\tdecodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|Int)|require\n\t\t\t)\\b"
  }, {
    "name": "support.function.method.array.coffee",
    "match": "(?x)((?<=\\.)(\n\t\t\t\tapply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|\n\t\t\t\tisPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|\n\t\t\t\treduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|\n\t\t\t\tunshift|valueOf\n\t\t\t))\\b"
  }, {
    "name": "support.function.static.array.coffee",
    "match": "(?x)((?<=Array\\.)(\n\t\t\t\tisArray\n\t\t\t))\\b"
  }, {
    "name": "support.function.static.object.coffee",
    "match": "(?x)((?<=Object\\.)(\n\t\t\t\tcreate|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|\n\t\t\t\tgetProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|\n\t\t\t\tisnt|keys|preventExtensions|seal\n\t\t\t))\\b"
  }, {
    "name": "support.function.static.math.coffee",
    "match": "(?x)((?<=Math\\.)(\n\t\t\t\tabs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|\n\t\t\t\thypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|\n\t\t\t\ttan|tanh|trunc\n\t\t\t))\\b"
  }, {
    "name": "support.function.static.number.coffee",
    "match": "(?x)((?<=Number\\.)(\n\t\t\t\tis(Finite|Integer|NaN)|toInteger\n\t\t\t))\\b"
  }, {
    "name": "constant.language.coffee",
    "match": "\\b(Infinity|NaN|undefined)\\b"
  }, {
    "name": "punctuation.terminator.statement.coffee",
    "match": "\\;"
  }, {
    "name": "meta.delimiter.object.comma.coffee",
    "match": ",[ |\\t]*"
  }, {
    "name": "meta.delimiter.method.period.coffee",
    "match": "\\."
  }, {
    "name": "meta.brace.curly.coffee",
    "match": "\\{|\\}"
  }, {
    "name": "meta.brace.round.coffee",
    "match": "\\(|\\)"
  }, {
    "name": "meta.brace.square.coffee",
    "match": "\\[|\\]\\s*"
  }, {
    "include": "#instance_variable"
  }, {
    "include": "#single_quoted_string"
  }, {
    "include": "#double_quoted_string"
  }, {
    "include": "#numeric"
  }],
  "foldingStopMarker": "^\\s*$|^\\s*[}\\]]\\s*$",
  "fileTypes": [
    "cjsx"
  ]
}
