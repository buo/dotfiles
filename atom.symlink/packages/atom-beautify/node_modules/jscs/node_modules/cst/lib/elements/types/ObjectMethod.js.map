{"version":3,"sources":["../../../src/elements/types/ObjectMethod.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAM,kBAAkB;AACpB,SAAK,IADe;AAEpB,SAAK;AAFe,CAAxB;;IAKqB,Y;;;AACjB,0BAAY,UAAZ,EAAwB;AAAA;;AAAA,0HACd,cADc,EACE,UADF;;AAEpB,cAAK,UAAL,GAAkB,IAAlB;AAFoB;AAGvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,YAAJ;AACA,gBAAI,cAAJ;AACA,gBAAI,YAAY,KAAhB;AACA,gBAAI,SAAS,KAAb;AACA,gBAAI,WAAW,KAAf;AACA,gBAAI,aAAJ;AACA,gBAAI,SAAS,EAAb;AACA,gBAAI,aAAJ;;AAEA,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC,yBAAS,SAAT;AACA,yBAAS,WAAT;AACA,4BAAY,IAAZ;AACH;;AAED,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,eAA/B,CAAJ,EAAqD;AACjD,uBAAO,SAAS,cAAT,CAAwB,KAA/B;;AAEA,yBAAS,SAAT,CAAmB,YAAnB;AACA,yBAAS,WAAT;;AAEA,2BAAW,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAX;AACA,sBAAM,QAAQ,QAAR,CAAN;;AAEA,yBAAS,WAAT;;AAEA,yBAAS,iCAAkB,QAAlB,CAAT;AACA,yBAAS,WAAT;;AAEA,uBAAO,SAAS,QAAT,CAAkB,gBAAlB,CAAP;AACH,aAfD,MAeO;AACH,uBAAO,QAAP;AACA,2BAAW,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAX;AACA,sBAAM,QAAQ,QAAR,CAAN;;AAEA,yBAAS,WAAT;;AAEA,oBAAI,SAAS,OAAT,CAAiB,YAAjB,CAAJ,EAAoC;AAChC,6BAAS,IAAT;;AAEA,6BAAS,iCAAkB,QAAlB,CAAT;AACA,6BAAS,WAAT;;AAEA,2BAAO,SAAS,QAAT,CAAkB,gBAAlB,CAAP;AAEH,iBARD,MAQO;AACH,6BAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,6BAAS,WAAT;AACA,wBAAI,SAAS,cAAT,CAAwB,SAA5B,EAAuC;AACnC,gCAAQ,SAAS,WAAT,EAAR;AACH,qBAFD,MAEO;AACH,gCAAQ,SAAS,cAAT,EAAR;AACH;AACJ;AACJ;;AAED,qBAAS,SAAT;;AAEA,iBAAK,UAAL,GAAkB,SAAlB;AACA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,GAAL,GAAW,GAAX;AACA,iBAAK,KAAL,GAAa,KAAb;AACA,iBAAK,QAAL,GAAgB,QAAhB;AACA,iBAAK,MAAL,GAAc,MAAd;AACA,iBAAK,MAAL,GAAc,MAAd;AACA,iBAAK,IAAL,GAAY,IAAZ;AACH;;;;;kBAzEgB,Y;;;AA4ErB,SAAS,OAAT,CAAiB,QAAjB,EAA2B;AACvB,QAAI,SAAS,MAAT,CAAgB,eAAhB,KAAoC,SAAS,MAAT,CAAgB,YAAhB,CAAxC,EAAuE;AACnE,eAAO,SAAS,QAAT,EAAP;AACH,KAFD,MAEO;AACH,iBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,iBAAS,WAAT;AACA,YAAI,SAAS,SAAS,cAAT,EAAb;AACA,iBAAS,WAAT;AACA,iBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,eAAO,MAAP;AACH;AACJ","file":"ObjectMethod.js","sourcesContent":["import Node from '../Node';\nimport getFunctionParams from './utils/getFunctionParams';\n\nconst getterAndSetter = {\n    get: true,\n    set: true\n};\n\nexport default class ObjectMethod extends Node {\n    constructor(childNodes) {\n        super('ObjectMethod', childNodes);\n        this.isFunction = true;\n    }\n\n    _acceptChildren(children) {\n        let key;\n        let value;\n        let generator = false;\n        let method = false;\n        let computed = false;\n        let kind;\n        let params = [];\n        let body;\n\n        if (children.isToken('Punctuator', '*')) {\n            children.passToken();\n            children.skipNonCode();\n            generator = true;\n        }\n\n        if (children.isToken('Identifier', getterAndSetter)) {\n            kind = children.currentElement.value;\n\n            children.passToken('Identifier');\n            children.skipNonCode();\n\n            computed = children.isToken('Punctuator', '[');\n            key = readKey(children);\n\n            children.skipNonCode();\n\n            params = getFunctionParams(children);\n            children.skipNonCode();\n\n            body = children.passNode('BlockStatement');\n        } else {\n            kind = 'method';\n            computed = children.isToken('Punctuator', '[');\n            key = readKey(children);\n\n            children.skipNonCode();\n\n            if (children.isToken('Punctuator')) {\n                method = true;\n\n                params = getFunctionParams(children);\n                children.skipNonCode();\n\n                body = children.passNode('BlockStatement');\n\n            } else {\n                children.passToken('Punctuator', ':');\n                children.skipNonCode();\n                if (children.currentElement.isPattern) {\n                    value = children.passPattern();\n                } else {\n                    value = children.passExpression();\n                }\n            }\n        }\n\n        children.assertEnd();\n\n        this._generator = generator;\n        this.kind = kind;\n        this.key = key;\n        this.value = value;\n        this.computed = computed;\n        this.method = method;\n        this.params = params;\n        this.body = body;\n    }\n}\n\nfunction readKey(children) {\n    if (children.isNode('StringLiteral') || children.isNode('Identifier')) {\n        return children.passNode();\n    } else {\n        children.passToken('Punctuator', '[');\n        children.skipNonCode();\n        let result = children.passExpression();\n        children.skipNonCode();\n        children.passToken('Punctuator', ']');\n        return result;\n    }\n}\n"]}