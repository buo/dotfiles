{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":["maxLength","pad","chainToLowerCamelCase"],"mappings":"AAAA,YAAY,CAAC;AAQb,mBAA0B,IAAc;IACpCA,YAAYA,CAACA;IAEbA,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,UAAAA,GAAGA,IAAIA,OAAAA,GAAGA,CAACA,MAAMA,EAAVA,CAAUA,CAACA,CAACA,MAAMA,CAACA,UAACA,CAACA,EAAEA,CAACA,IAAKA,OAAAA,IAAIA,CAACA,GAAGA,CAACA,CAACA,EAAEA,CAACA,CAACA,EAAdA,CAAcA,EAAEA,CAACA,CAACA,CAACA;AAC3EA,CAACA;AAJe,iBAAS,YAIxB,CAAA;AAUD,aAAoB,GAAW,EAAE,MAAc,EAAE,GAAS;IACtDC,YAAYA,CAACA;IADgCA,mBAASA,GAATA,SAASA;IAGtDA,EAAEA,CAACA,CAACA,MAAMA,IAAIA,GAAGA,CAACA,MAAMA,CAACA,CAACA,CAACA;QACvBA,MAAMA,CAACA,GAAGA,CAACA;IACfA,CAACA;IACDA,EAAEA,CAACA,CAACA,GAAGA,KAAKA,EAAEA,CAACA,CAACA,CAACA;QACbA,MAAMA,IAAIA,KAAKA,CAACA,8BAA8BA,CAACA,CAACA;IACpDA,CAACA;IACDA,OAAOA,GAAGA,CAACA,MAAMA,GAAGA,MAAMA,EAAEA,CAACA;QACzBA,GAAGA,IAAIA,GAAGA,CAACA;IACfA,CAACA;IACDA,MAAMA,CAACA,GAAGA,CAACA;AACfA,CAACA;AAbe,WAAG,MAalB,CAAA;AAQD,+BAAsC,GAAW;IAC7CC,YAAYA,CAACA;IAEbA,IAAIA,SAASA,GAAGA,KAAKA,CAACA;IACtBA,MAAMA,CAACA,GAAGA;SACLA,KAAKA,CAACA,EAAEA,CAACA;SACTA,GAAGA,CAACA,UAAAA,IAAIA;QACLA,EAAEA,CAACA,CAACA,IAAIA,KAAKA,GAAGA,CAACA,CAACA,CAACA;YACfA,SAASA,GAAGA,IAAIA,CAACA;YACjBA,MAAMA,CAACA,EAAEA,CAACA;QACdA,CAACA;QAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA;YACnBA,SAASA,GAAGA,KAAKA,CAACA;YAClBA,MAAMA,CAACA,IAAIA,CAACA,WAAWA,EAAEA,CAACA;QAC9BA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACJA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;IACLA,CAACA,CAACA;SACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA;AAClBA,CAACA;AAlBe,6BAAqB,wBAkBpC,CAAA","sourcesContent":["\"use strict\";\n\n/**\n * calc max length of strs.\n * @param strs\n * @returns {number}\n * @private\n */\nexport function maxLength(strs: string[]): number {\n    \"use strict\";\n\n    return strs.map(str => str.length).reduce((p, c) => Math.max(p, c), 0);\n}\n\n/**\n * padding string with pad.\n * @param str\n * @param length\n * @param pad\n * @returns {string}\n * @private\n */\nexport function pad(str: string, length: number, pad = \" \"): string {\n    \"use strict\";\n\n    if (length <= str.length) {\n        return str;\n    }\n    if (pad === \"\") {\n        throw new Error(\"pad can't to be empty string\");\n    }\n    while (str.length < length) {\n        str += pad;\n    }\n    return str;\n}\n\n/**\n * convert foo-bar to fooBar.\n * @param str\n * @returns {string}\n * @private\n */\nexport function chainToLowerCamelCase(str: string): string {\n    \"use strict\";\n\n    var nextCamel = false;\n    return str\n        .split(\"\")\n        .map(char => {\n            if (char === \"-\") {\n                nextCamel = true;\n                return \"\";\n            } else if (nextCamel) {\n                nextCamel = false;\n                return char.toUpperCase();\n            } else {\n                return char;\n            }\n        })\n        .join(\"\");\n}\n"]}