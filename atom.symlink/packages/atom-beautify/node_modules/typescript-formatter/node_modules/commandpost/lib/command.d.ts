import Option from "./option";
import Argument from "./argument";
export default class Command<Opt, Arg> {
    _description: string;
    _usage: string;
    _help: Option;
    _version: Option;
    _versionStr: string;
    _action: (opts: Opt, args: Arg, rest: string[]) => any;
    _rawArgs: string[];
    _args: string[];
    _rest: string[];
    _allowUnknownOption: boolean;
    parent: Command<any, any>;
    name: string;
    options: Option[];
    subCommands: Command<any, any>[];
    args: Argument[];
    parsedOpts: Opt;
    parsedArgs: Arg;
    unknownOptions: string[];
    constructor(name: string);
    description(desc: string): Command<Opt, Arg>;
    usage(usage: string): Command<Opt, Arg>;
    option(flags: string, description?: string, defaultValue?: any): Command<Opt, Arg>;
    allowUnknownOption(flag?: boolean): Command<Opt, Arg>;
    action(fn: (opts: Opt, args: Arg, rest: string[]) => any): Command<Opt, Arg>;
    subCommand<Opt2, Arg2>(name: string): Command<Opt2, Arg2>;
    is(arg: string): boolean;
    help(flags: string, description: string): Command<Opt, Arg>;
    version(version: string, flags: string, description?: string): Command<Opt, Arg>;
    exec(): Promise<{}>;
    parse(argv: string[]): Promise<{}>;
    _getAncestorsAndMe(): Command<any, any>[];
    _parseRawArgs(args: string[]): string[];
    _matchSubCommand(rest: string[]): boolean;
    _parseOptions(args: string[]): string[];
    _parseArgs(rest: string[]): string[];
    _normalize(args: string[]): string[];
    helpText(): string;
}
