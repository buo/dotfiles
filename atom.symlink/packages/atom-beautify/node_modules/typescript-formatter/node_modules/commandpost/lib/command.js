"use strict";
var option_1 = require("./option");
var argument_1 = require("./argument");
var utils = require("./utils");
var Command = (function () {
    function Command(name) {
        var _this = this;
        this._help = new option_1.default("-h, --help", "display help");
        this._rest = [];
        this.options = [];
        this.subCommands = [];
        this.parsedOpts = {};
        this.parsedArgs = {};
        this.unknownOptions = [];
        var args = name.split(/\s+/);
        this.name = args.shift();
        var findOptional = false;
        var findVariadic = false;
        this.args = args.map(function (argStr) {
            if (findVariadic) {
                throw new Error("parameter can not placed after variadic parameter");
            }
            var arg = new argument_1.default(argStr);
            if (arg.required && findOptional) {
                throw new Error("required parameter is not placed after optional parameter");
            }
            if (!arg.required) {
                findOptional = true;
            }
            if (arg.variadic) {
                findVariadic = true;
            }
            return arg;
        });
        this._action = function () {
            process.stdout.write(_this.helpText() + '\n');
        };
    }
    Command.prototype.description = function (desc) {
        this._description = desc;
        return this;
    };
    Command.prototype.usage = function (usage) {
        this._usage = usage;
        return this;
    };
    Command.prototype.option = function (flags, description, defaultValue) {
        var option = new option_1.default(flags, description, defaultValue);
        this.options.push(option);
        return this;
    };
    Command.prototype.allowUnknownOption = function (flag) {
        if (flag === void 0) { flag = true; }
        this._allowUnknownOption = flag;
        return this;
    };
    Command.prototype.action = function (fn) {
        this._action = fn;
        return this;
    };
    Command.prototype.subCommand = function (name) {
        var command = new Command(name);
        command.parent = this;
        this.subCommands.push(command);
        return command;
    };
    Command.prototype.is = function (arg) {
        return this.name === arg;
    };
    Command.prototype.help = function (flags, description) {
        this._help = new option_1.default(flags, description);
        return this;
    };
    Command.prototype.version = function (version, flags, description) {
        if (description === void 0) { description = "output the version number"; }
        this._version = new option_1.default(flags, description);
        this._versionStr = version;
        return this;
    };
    Command.prototype.exec = function () {
        return Promise.resolve(this._action(this.parsedOpts, this.parsedArgs, this._rest));
    };
    Command.prototype.parse = function (argv) {
        var _this = this;
        return Promise
            .resolve(null)
            .then(function () {
            var rest = _this._parseRawArgs(argv);
            if (_this._args.some(function (arg) { return _this._help.is(arg); })) {
                process.stdout.write(_this.helpText() + '\n');
                process.exit(0);
                return Promise.resolve({});
            }
            var subCommand;
            if (_this.parent == null) {
                if (_this._rest.some(function (arg) { return _this._help.name() === arg; })) {
                    if (rest[0]) {
                        subCommand = _this.subCommands.filter(function (cmd) { return cmd.is(rest[0]); })[0];
                        if (subCommand) {
                            process.stdout.write(subCommand.helpText() + '\n');
                            process.exit(0);
                            return Promise.resolve({});
                        }
                    }
                }
            }
            if (_this._version && _this._args.some(function (arg) { return _this._version.is(arg); })) {
                process.stdout.write((_this._versionStr || "unknown") + '\n');
                process.exit(0);
                return Promise.resolve({});
            }
            if (rest[0]) {
                subCommand = _this.subCommands.filter(function (cmd) { return cmd.is(rest[0]); })[0];
                if (subCommand) {
                    return subCommand.parse(rest.slice(1));
                }
            }
            return _this.exec();
        });
    };
    Command.prototype._getAncestorsAndMe = function () {
        if (!this.parent) {
            return [this];
        }
        else {
            return this.parent._getAncestorsAndMe().concat([this]);
        }
    };
    Command.prototype._parseRawArgs = function (args) {
        args = args.slice(0);
        var target = [];
        var rest = [];
        for (var i = 0; i < args.length; i++) {
            var arg = args[i];
            if (arg === "--") {
                target = target.concat(args.slice(i));
                break;
            }
            var cmd = this.subCommands.filter(function (cmd) { return cmd.is(arg); })[0];
            if (cmd) {
                rest = args.slice(i);
                break;
            }
            target.push(arg);
        }
        this._rawArgs = target.slice(0);
        this._args = this._normalize(target);
        this._rest = this._parseOptions(this._args);
        var cmds = this._getAncestorsAndMe();
        var allowUnknownOption = cmds.reverse().map(function (cmd) { return cmd._allowUnknownOption; }).filter(function (allowUnknownOption) { return typeof allowUnknownOption !== "undefined"; })[0];
        if (this.unknownOptions.length !== 0 && !allowUnknownOption) {
            var errMsg = "unknown option";
            errMsg += this.unknownOptions.length === 1 ? " " : "s ";
            errMsg += this.unknownOptions.join(", ") + "\n";
            errMsg += this.helpText();
            throw new Error(errMsg);
        }
        if (this._matchSubCommand(rest)) {
            return rest;
        }
        this._rest = this._parseArgs(this._rest);
        return rest;
    };
    Command.prototype._matchSubCommand = function (rest) {
        if (rest == null || !rest[0]) {
            return false;
        }
        var subCommand = this.subCommands.filter(function (cmd) { return cmd.is(rest[0]); })[0];
        return !!subCommand;
    };
    Command.prototype._parseOptions = function (args) {
        var _this = this;
        args = args.slice(0);
        var rest = [];
        var processedOptions = [];
        while (args.length !== 0) {
            var arg = args.shift();
            if (arg === "--") {
                rest = rest.concat(args);
                break;
            }
            var opt = this.options.filter(function (opt) { return opt.is(arg); })[0];
            if (!opt) {
                rest.push(arg);
                if (arg.indexOf("-") === 0 && !this._help.is(arg) && (!this._version || !this._version.is(arg))) {
                    this.unknownOptions.push(arg);
                }
                continue;
            }
            args = opt.parse(this.parsedOpts, [arg].concat(args));
            processedOptions.push(opt);
        }
        this.options
            .filter(function (opt) { return processedOptions.indexOf(opt) === -1; })
            .forEach(function (opt) {
            if (opt.required || opt.optional) {
                _this.parsedOpts[opt.name()] = _this.parsedOpts[opt.name()] || [];
                if (opt.defaultValue) {
                    _this.parsedOpts[opt.name()].push(opt.defaultValue);
                }
            }
            else {
                _this.parsedOpts[opt.name()] = opt.defaultValue;
            }
        });
        return rest;
    };
    Command.prototype._parseArgs = function (rest) {
        var _this = this;
        rest = rest.slice(0);
        this.args.forEach(function (argInfo) {
            rest = argInfo.parse(_this.parsedArgs, rest);
        });
        return rest;
    };
    Command.prototype._normalize = function (args) {
        var result = [];
        for (var i = 0; i < args.length; i++) {
            var arg = args[i];
            var lastOpt;
            if (0 < i) {
                lastOpt = this.options.filter(function (opt) { return opt.is(args[i - 1]); })[0];
            }
            if (arg === "--") {
                result = result.concat(args.slice(i));
                break;
            }
            else if (lastOpt && lastOpt.required) {
                result.push(arg);
            }
            else if (/^-[^-]/.test(arg)) {
                arg.slice(1).split("").forEach(function (c) { return result.push("-" + c); });
            }
            else if (/^--/.test(arg) && arg.indexOf("=") !== -1) {
                result.push(arg.slice(0, arg.indexOf("=")), arg.slice(arg.indexOf("=") + 1));
            }
            else {
                result.push(arg);
            }
        }
        return result;
    };
    Command.prototype.helpText = function () {
        var result = "";
        result += "  Usage: ";
        if (this._usage != null) {
            result += this._usage;
        }
        else {
            result += this._getAncestorsAndMe().map(function (cmd) { return cmd.name; }).join(" ") + " ";
            if (this.options.length !== 0) {
                result += "[options] ";
            }
            if (this.subCommands.length !== 0) {
                result += "[command] ";
            }
            if (this.args.length !== 0) {
                result += "[--] ";
                result += this.args.map(function (arg) {
                    if (arg.required) {
                        return "<" + arg.name + (arg.variadic ? "..." : "") + ">";
                    }
                    else {
                        return "[" + arg.name + (arg.variadic ? "..." : "") + "]";
                    }
                }).join(" ");
            }
        }
        result += "\n\n";
        if (this.options.length !== 0) {
            result += "  Options:\n\n";
            var optionsMaxLength = utils.maxLength(this.options.map(function (opt) { return opt.flags; }));
            result += this.options.map(function (opt) {
                var result = "    ";
                result += utils.pad(opt.flags, optionsMaxLength);
                result += "  ";
                result += opt.description || "";
                result += "\n";
                return result;
            }).join("");
            result += "\n\n";
        }
        if (this.subCommands.length !== 0) {
            result += "  Commands:\n\n";
            var subCommandsMaxLength = utils.maxLength(this.subCommands.map(function (cmd) { return cmd.name; }));
            result += this.subCommands.map(function (cmd) {
                var result = "    ";
                result += utils.pad(cmd.name, subCommandsMaxLength);
                result += "  ";
                result += cmd._description || "";
                result += "\n";
                return result;
            }).join("");
            result += "\n\n";
        }
        return result;
    };
    return Command;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Command;
//# sourceMappingURL=command.js.map