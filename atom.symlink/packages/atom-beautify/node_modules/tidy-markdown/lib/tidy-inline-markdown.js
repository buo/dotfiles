// Generated by CoffeeScript 1.10.0
(function() {
  var CODE_REGEX, Entities, IMG_REGEX, LINK_REGEX, delimitCode, htmlEntities, marked, tidyInlineMarkdown;

  Entities = require('html-entities').AllHtmlEntities;

  marked = require('marked');

  delimitCode = require('./utils').delimitCode;

  htmlEntities = new Entities();

  IMG_REGEX = /<img src="([^"]*)"(?: alt="([^"]*)")?(?: title="([^"]*)")?>/g;

  LINK_REGEX = /<a href="([^"]*)"(?: title="([^"]*)")?>([^<]*)<\/a>/g;

  CODE_REGEX = /<code>([^<]+)<\/code>/g;

  tidyInlineMarkdown = function(token) {
    token.text = marked.inlineLexer(token.text, token.links || {}).replace(/\u2014/g, '--').replace(/\u2018|\u2019/g, '\'').replace(/\u201c|\u201d/g, '"').replace(/\u2026/g, '...').replace(/<\/?strong>/g, '**').replace(/<\/?em>/g, '_').replace(/<\/?del>/g, '~~').replace(CODE_REGEX, function(m, code) {
      return delimitCode(code, '`');
    }).replace(IMG_REGEX, function(m, url, alt, title) {
      if (url == null) {
        url = '';
      }
      if (alt == null) {
        alt = '';
      }
      if (title != null) {
        url += " \"" + (title.replace(/\\|"/g, function(m) {
          return "\\" + m;
        })) + "\"";
      }
      return "![" + alt + "](" + url + ")";
    }).replace(LINK_REGEX, function(m, url, title, text) {
      if (url == null) {
        url = '';
      }
      if (text == null) {
        text = '';
      }
      if (title != null) {
        url += " \"" + (title.replace(/\\|"/g, function(m) {
          return "\\" + m;
        })) + "\"";
      }
      return "[" + text + "](" + url + ")";
    });
    token.text = htmlEntities.decode(token.text);
    return token;
  };

  module.exports = tidyInlineMarkdown;

}).call(this);
