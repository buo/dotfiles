// Generated by CoffeeScript 1.10.0
(function() {
  var nestContainingTokens, nestingEndTokens, nestingStartTokens, preprocessAST,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  nestingStartTokens = ['list_item_start', 'blockquote_start', 'loose_item_start'];

  nestingEndTokens = ['list_item_end', 'blockquote_end', 'loose_item_end'];

  nestContainingTokens = ['list_item', 'blockquote', 'loose_item'];

  preprocessAST = function(ast) {
    var currentToken, e, i, j, len, nestingLevel, orderedList, orderedListItemNumber, out, ref, ref1, ref2, ref3, subAST, token, tokenIndex;
    i = 0;
    out = [];
    orderedList = false;
    while (i < ast.length) {
      currentToken = ast[i];
      if (currentToken.type === 'list_start') {
        orderedListItemNumber = 0;
        orderedList = currentToken.ordered;
      } else if (ref = currentToken.type, indexOf.call(nestingStartTokens, ref) >= 0) {
        tokenIndex = nestingStartTokens.indexOf(currentToken.type);
        currentToken.type = nestContainingTokens[tokenIndex];
        i++;
        nestingLevel = 1;
        subAST = [];
        while (true) {
          if (ref1 = ast[i].type, indexOf.call(nestingEndTokens, ref1) >= 0) {
            nestingLevel--;
          } else if (ref2 = ast[i].type, indexOf.call(nestingStartTokens, ref2) >= 0) {
            nestingLevel++;
          }
          if (nestingLevel === 0) {
            break;
          }
          subAST.push(ast[i]);
          i++;
        }
        e = 0;
        ref3 = preprocessAST(subAST);
        for (j = 0, len = ref3.length; j < len; j++) {
          token = ref3[j];
          if (token.nesting == null) {
            token.nesting = [];
          }
          if (token.indent == null) {
            token.indent = '';
          }
          token.nesting.push(currentToken.type);
          if (token.nesting !== [] && token.nesting.length > 1) {
            token.indent = '  ' + token.indent;
          } else if (currentToken.type === 'blockquote') {
            token.indent += '> ';
          } else if (currentToken.type === 'list_item') {
            token.type = 'list_item';
            if (orderedList) {
              orderedListItemNumber++;
              token.indent += orderedListItemNumber + ". ";
            } else {
              token.indent += '- ';
            }
          } else if (e === 0 && token.type === 'text' && currentToken.type === 'loose_item') {
            token.type = 'list_item';
            token.indent += '- ';
          } else {
            token.indent = '  ' + token.indent;
          }
          if (token.type === 'text' && currentToken.type === 'loose_item') {
            token.type = 'paragraph';
          }
          e++;
          out.push(token);
        }
      } else {
        out.push(currentToken);
      }
      i++;
    }
    return out;
  };

  module.exports = preprocessAST;

}).call(this);
